//PrimeFinder Part A

public static int primesBetween(int lower, int upper){int count=0;while(lower<=upper){if(isPrime(lower)){count++;}lower++;}return count;}

//PrimeFinder Part B

public static int gapToNextPrime(int num){int count=0;while(!isPrime(num)){count++;num++;}return count;}

//CaesarCipher Part A

public static String encode(String msg, int shift){String y="";for(int i=0;i<msg.length();i++){int x=letterToNum(msg.charAt(i)+"");for(int j=0;j<shift;j++){if(x==25){x=-1;}x++;}y+=numToLetter(x);}return y;}

//CaesarCipher Part B

public static String allEncodings(String msg){String x=msg+"\n";for(int i=0;i<25;i++){x+=encode(msg,i+1)+"\n";}return x;}

//Digit Summarizer Part A

public static int digitalRoot(int n){while(n>=10){n=digitSum(n);}return n;}

//Digit Summarizer Part B

public static boolean containsRoot(int n){return Integer.toString(n).contains(Integer.toString(digitalRoot(n)));}

//Position

public class Position{private double dist,x,y;public Position(double z,double w){x=z;y=w;dist=0;}public void move(double d,String dir){dist+=d;switch(dir.charAt(0)){case 'E':x+=d;break;case 'W':x-=d;break;case 'N':y+=d;break;case 'S':y-=d;break;}}public String toString(){return "("+x+", "+y+")";}public double totalDistance(){return dist;}}

//Fundraiser

public class Fundraiser{private double tar,don;private int numDon;public Fundraiser(double x){tar=x;}public double averageDonation(){if(numDon==0){return 0.0;}return don/(double)numDon;}public void addDonation(double x){if(x>0){don+=x;numDon++;}}public double distanceToTarget(){if(don>=tar){return 0.0;}return tar-don;}}

//TriangleNumberTracker

public class TriangleNumberTracker{private int tnumber,ct;public TriangleNumberTracker(int x){tnumber=0;ct=x;numset();}public void numset(){tnumber=0;for(int i=1;i<=ct;i++){tnumber+=i;}}public int currentTriangle(){return tnumber;}public void nextTriangle(){ct++;numset();}public void prevTriangle(){if(ct>1){ct--;}numset();}}

//Hotel Rooms Part A

public int checkIn(String name, int number){int check=-1;int id=0;for(int i=0;i<rooms.size();i++){if(rooms.get(i).getNumber()==number){check++;id=i;}}if(check==-1){return check;}if(rooms.get(id).isOccupied()){return 0;}rooms.get(id).checkInNewGuest(name);return 1;}

//Hotel Rooms Part B

public ArrayList<Integer> availableRoomNumbers(){ArrayList<Integer> nums=new ArrayList<Integer>();for(Room room:rooms){if(!room.isOccupied()){nums.add(room.getNumber());}}return nums;}

//SequenceProperties Part A

public static int[] getDiffs(int[] seq){int[] seq2=new int[seq.length-1];for(int i=0;i<seq2.length;i++){seq2[i]=seq[i+1]-seq[i];}return seq2;}

//SequenceProperties Part B

public static boolean isLinear(int[] seq){boolean check=true;int[] seq2=getDiffs(seq);if(seq2[0]<0){for(int i=0;i<seq2.length;i++){if(seq2[i]>0){check=false;}}}else{for(int i=0;i<seq2.length;i++){if(seq2[i]<0){check=false;}}}for(int i=0;i<seq2.length-1;i++){if(seq2[i]!=seq2[i+1]){check=false;}}return check;}

//SequenceProperties Part C

public static boolean isQuadratic(int[] seq){return !isLinear(seq)&&isLinear(getDiffs(seq));}

//High Scores Part A

/*NOTE, MAKE SURE YOU IMPORT COLLECTIONS THROUGH "import java.util.Collections;"*/
public void moveUp(int pos){int check=scoreboard.get(pos).getHighScore();for(int i=0;i<scoreboard.size();i++){if(check>scoreboard.get(i).getHighScore()){Collections.swap(scoreboard,i,pos);}}}

//High Scores Part B

public boolean newScore(String name,int score){for(int i=0;i<scoreboard.size();i++){if(scoreboard.get(i).getName().equals(name)){scoreboard.get(i).updateScore(score);moveUp(i);return false;}}scoreboard.add(new Player(name,score));moveUp(scoreboard.size()-1);return true;}

//Heights Part A

public boolean isPeak(int r,int c){return r>0&&r<heights.length-1&&c>0&&c<heights[r].length-1&&heights[r-1][c]<heights[r][c]&&heights[r+1][c]<heights[r][c]&&heights[r][c-1]<heights[r][c]&&heights[r][c+1]<heights[r][c]&&heights[r+1][c+1]<heights[r][c]&&heights[r+1][c-1]<heights[r][c]&&heights[r-1][c+1]<heights[r][c]&&heights[r-1][c-1]<heights[r][c];}

//Heights Part B

public ArrayList<String> peakInfo(){ArrayList<String> ret=new ArrayList<String>();for(int i=0;i<heights.length-1;i++){for(int j=0;j<heights[i].length-1;j++){if(isPeak(i,j)){ret.add("Peak at ("+i+", "+j+"): Height "+heights[i][j]);}}}return ret;}

//RowCompare Part A

import java.lang.StringBuffer;public class RowCompare{public static boolean isRow(int[] arr,int[][] mat,int limit){if(limit<0||limit>mat.length){return false;}StringBuffer compare1=new StringBuffer();StringBuffer compare2=new StringBuffer();for(int i=0;i<limit;i++){for(int j=0;j<mat[i].length;j++){compare1.append(Integer.toString(mat[i][j]));compare2.append(Integer.toString(arr[j]));}if(compare1.toString().equals(compare2.toString())){return true;}compare1.delete(0,compare1.length());compare2.delete(0,compare2.length());}return false;}}

//RowCompare Part B

public static int uniqueRows(int[][] mat){int count=0;boolean x=isRow(mat[0],mat,1);StringBuilder list=new StringBuilder();StringBuilder check=new StringBuilder();for(int i=0;i<mat.length;i++){for(int j=0;j<mat[i].length;j++){check.append(mat[i][j]+"");}if(list.toString().indexOf(check.toString())==-1){list.append(check.toString()+" ");count++;}check.delete(0,check.length());}return count;}

//Warehouse Part A

public boolean fulfillOrder(String code,int orderQuant){for(Product[] stockrow:stock){for(Product block:stockrow){if(block.getProductCode().equals(code)&&block.getQuant()>=orderQuant){block.setQuant(block.getQuant()-orderQuant);return true;}}}return false;}

//Warehouse Part B

//GO INTO THE "Product.java" FILE AND TAKE OUT THE "final" in "private final String productCode;" then add the method "public void setProductCode(String x){productCode=x;}" INSIDE THE PRODUCT CLASS
public boolean reposition(int frRow,int frCol,int toRow,int toCol){try{if(stock[toRow][toCol].getQuant()==0){String code=stock[toRow][toCol].getProductCode();stock[toRow][toCol].setQuant(stock[frRow][frCol].getQuant());stock[toRow][toCol].setProductCode(stock[frRow][frCol].getProductCode());stock[frRow][frCol].setProductCode(code);stock[frRow][frCol].setQuant(0);return true;}return false;}catch(Exception e){return false;}}

//Guessing game
public class GuessingGame{private int guess;private static int numOf=0;private boolean complete;public GuessingGame(int num){guess=((num>0)?1:0)*((int)(Math.random()*num)+1);}public int numGuesses(){return numOf;}public String guessAnswer(int cGuess){return (complete)?"Game Already Over":((cGuess>guess)?"Too high":((cGuess<guess)?"Too low":"Correct"));}}

//Reverser
public class Reverser{public static String reverseWord(String word){return new java.lang.StringBuilder(word).reverse().toString();}public static String reverseAllWords(String sentence){java.util.List<String> sent=java.util.Arrays.asList(sentence.split(" "));for(int i=0;i<sent.size();i++){sent.set(i,reverseWord(sent.get(i)));}return sent.toString().replaceAll(", "," ").replace("[","").replace("]","");}}

//AddressBook
import java.util.ArrayList;public class AddressBook{private ArrayList<Address> addresses;public AddressBook(){addresses=new ArrayList<Address>();}public java.util.List<Address> onStreet(String st){ArrayList<Address> onStreet=new ArrayList<Address>();addresses.forEach(n->{if(n.getStreet().equals(st)){onStreet.add(n);}});return onStreet;}public int newBusiness(String nm,String st,int no){for(int i=0;i<addresses.size();i++){if(addresses.get(i).getName().equals(nm)&&addresses.get(i).getStreet().equals(st)&&addresses.get(i).getNumber()==no){return i;}}addresses.add(new Address(nm,st,no));return addresses.size()-1;}}

//StationDistances
public class StationDistances{private double[][] dists;public StationDistances(double[] distances){dists=new double[distances.length][distances.length];for(int i=0;i<distances.length;i++){dists[i][0]=dists[0][i]=distances[i];for(int j=1;j<=i;j++){dists[i][j]=dists[j][i]=(int)((distances[i]-distances[j])*100)/100.0;}}}public void changeDist(int index,double val){dists[0][index]=dists[index][0]=val;for(int i=1;i<index;i++){dists[i][index]=dists[index][i]=dists[index][0]-dists[index-1][0];}}}
